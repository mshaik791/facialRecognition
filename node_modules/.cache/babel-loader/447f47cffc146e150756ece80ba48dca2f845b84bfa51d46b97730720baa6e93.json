{"ast":null,"code":"var _jsxFileName = \"/Users/hameed/Desktop/Web Development/Bootcamp2/facerecognitionapp/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './Components/Navigation/Navigation';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Signin from './Components/Signin/Signin';\nimport Register from './Components/Register/Register';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport \"./App.css\";\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiReqOptions = imageUrl => {\n  const PAT = '4f7d0da0bca240efb07ae6b755858b5e';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'mshaik791';\n  const APP_ID = 'face-detection';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    // calculateFaceLocation = (data) => {\n    //    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    //    console.log(clarifaiFace);\n    //    const image = document.getElementById('inputImage');\n    //    const width = Number(image.width)\n    //    console.log(\"width\", width);\n    //    const height = Number(image.height)\n    //    console.log(\"height\", height);\n    //     const leftCol = clarifaiFace.left_col * width;\n    //     console.log(leftCol);\n    //     const topRow = clarifaiFace.top_row * height;\n    //     const rightCol = width - (clarifaiFace.right_col * width);\n    //     const  bottomRow = height - (clarifaiFace.bottom_row * height);\n    //    return {\n    //      leftCol: clarifaiFace.left_col * width,\n    //      topRow: clarifaiFace.top_row * height,\n    //      rightCol: width - (clarifaiFace.right_col * width),\n    //      bottomRow: height - (clarifaiFace.bottom_row * height)\n    //    }\n    // }\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      //console.log(box.topRow);\n\n      this.setState({\n        box: box\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiReqOptions(this.state.input)).then(response => response.json())\n      // .then(result => console.log(result.outputs[0].data.regions[0].region_info.bounding_box))\n      .then(result => this.displayFaceBox(this.calculateFaceLocation(result))).catch(error => console.log('error', error));\n\n      //console.log(result.outputs[0].data.regions[0].region_info.bounding_box)\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onRouteChange = route => {\n      this.setState({\n        route: route\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: true\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), this.state.route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: this.state.box,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }, this) : this.state.route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Navigation","FaceRecognition","Signin","Register","Logo","ImageLinkForm","Rank","jsxDEV","_jsxDEV","returnClarifaiReqOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onButtonSubmit","state","input","fetch","then","response","json","result","catch","error","console","log","onInputChange","event","target","value","onRouteChange","route","isSignedIn","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/hameed/Desktop/Web Development/Bootcamp2/facerecognitionapp/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './Components/Navigation/Navigation'\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\nimport Signin from './Components/Signin/Signin'\nimport Register from './Components/Register/Register'\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm'\nimport Rank from './Components/Rank/Rank'\nimport \"./App.css\";\n\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst returnClarifaiReqOptions = (imageUrl) => {\n\n  const PAT = '4f7d0da0bca240efb07ae6b755858b5e';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n  const USER_ID = 'mshaik791';       \n  const APP_ID = 'face-detection';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                }\n            }\n        }\n    ]\n  });\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n\n\n    \n  };\n\n\n  return requestOptions;\n\n\n\n\n}\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\n\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\n\n\nclass App extends Component {\n \n constructor(){\n\n  super();\n  this.state = {\n    input: '',\n    imageUrl: '',\n    box: {},\n    route: 'signin',\n    isSignedIn: true\n\n\n\n  }\n\n\n }\n\n\n // calculateFaceLocation = (data) => {\n\n //    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n //    console.log(clarifaiFace);\n //    const image = document.getElementById('inputImage');\n //    const width = Number(image.width)\n //    console.log(\"width\", width);\n //    const height = Number(image.height)\n //    console.log(\"height\", height);\n\n //     const leftCol = clarifaiFace.left_col * width;\n //     console.log(leftCol);\n //     const topRow = clarifaiFace.top_row * height;\n //     const rightCol = width - (clarifaiFace.right_col * width);\n //     const  bottomRow = height - (clarifaiFace.bottom_row * height);\n //    return {\n //      leftCol: clarifaiFace.left_col * width,\n //      topRow: clarifaiFace.top_row * height,\n //      rightCol: width - (clarifaiFace.right_col * width),\n //      bottomRow: height - (clarifaiFace.bottom_row * height)\n\n //    }\n\n\n\n // }\n\n calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n displayFaceBox = (box) => {\n\n    //console.log(box.topRow);\n\n    this.setState({box: box});\n\n }\n\n onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiReqOptions(this.state.input))\n    .then(response => response.json())\n    // .then(result => console.log(result.outputs[0].data.regions[0].region_info.bounding_box))\n    .then(result =>  this.displayFaceBox(this.calculateFaceLocation(result)))\n    .catch(error => console.log('error', error));\n\n    //console.log(result.outputs[0].data.regions[0].region_info.bounding_box)\n\n }\n\n onInputChange = (event) => {\n\n    this.setState({input: event.target.value });\n\n }\n\n onRouteChange = (route) => {\n\n    this.setState({route: route});\n\n }\n\n\n  render() {\n    \n\n    return (\n\n      <div className=\"App\">\n\n          <ParticlesBg type=\"cobweb\" bg={true} />\n          <Navigation onRouteChange={this.onRouteChange}/>\n\n          {this.state.route === 'home'\n            ? <div>\n                <Logo/>\n                <Rank/>\n                <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n                <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n              </div>\n            : (\n\n                this.state.route === 'signin'\n                ? <Signin onRouteChange={this.onRouteChange}/>\n                : <Register onRouteChange={this.onRouteChange}/>\n\n              )\n               \n             \n          }\n          \n\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAO,WAAW;;AAIlB;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,wBAAwB,GAAIC,QAAQ,IAAK;EAE7C,MAAMC,GAAG,GAAG,kCAAkC;EAChD;EACA;EACE,MAAMC,OAAO,GAAG,WAAW;EAC3B,MAAMC,MAAM,GAAG,gBAAgB;EAC/B;EACA,MAAMC,QAAQ,GAAG,gBAAgB;EACjC,MAAMC,gBAAgB,GAAG,kCAAkC;EAC3D,MAAMC,SAAS,GAAGN,QAAQ;EAE1B,MAAMO,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzB,aAAa,EAAE;MACX,SAAS,EAAEP,OAAO;MAClB,QAAQ,EAAEC;IACd,CAAC;IACD,QAAQ,EAAE,CACN;MACI,MAAM,EAAE;QACJ,OAAO,EAAE;UACL,KAAK,EAAEG;QACX;MACJ;IACJ,CAAC;EAEP,CAAC,CAAC;EAEF,MAAMI,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGX;IAC9B,CAAC;IACDY,IAAI,EAAEN;EAIR,CAAC;EAGD,OAAOG,cAAc;AAKvB,CAAC;;AAED;;AAEA;AACA;AACA;;AAIA;AACA;AACA;;AAIA,MAAMI,GAAG,SAAS1B,SAAS,CAAC;EAE3B2B,WAAWA,CAAA,EAAE;IAEZ,KAAK,CAAC,CAAC;IAgBR;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAIA;IAAA,KAEAC,qBAAqB,GAAIC,IAAI,IAAK;MAC/B,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,YAAY;MAC7E,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MACnD,MAAMC,KAAK,GAAGC,MAAM,CAACJ,KAAK,CAACG,KAAK,CAAC;MACjC,MAAME,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAACK,MAAM,CAAC;MACnC,OAAO;QACLC,OAAO,EAAEX,YAAY,CAACY,QAAQ,GAAGJ,KAAK;QACtCK,MAAM,EAAEb,YAAY,CAACc,OAAO,GAAGJ,MAAM;QACrCK,QAAQ,EAAEP,KAAK,GAAIR,YAAY,CAACgB,SAAS,GAAGR,KAAM;QAClDS,SAAS,EAAEP,MAAM,GAAIV,YAAY,CAACkB,UAAU,GAAGR;MACjD,CAAC;IACH,CAAC;IAAA,KAEFS,cAAc,GAAIC,GAAG,IAAK;MAEvB;;MAEA,IAAI,CAACC,QAAQ,CAAC;QAACD,GAAG,EAAEA;MAAG,CAAC,CAAC;IAE5B,CAAC;IAAA,KAEDE,cAAc,GAAG,MAAM;MACpB,IAAI,CAACD,QAAQ,CAAC;QAACvC,QAAQ,EAAE,IAAI,CAACyC,KAAK,CAACC;MAAK,CAAC,CAAC;MAE3CC,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,GAAG,UAAU,EAAE5C,wBAAwB,CAAC,IAAI,CAAC0C,KAAK,CAACC,KAAK,CAAC,CAAC,CACvHE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;MACjC;MAAA,CACCF,IAAI,CAACG,MAAM,IAAK,IAAI,CAACV,cAAc,CAAC,IAAI,CAACrB,qBAAqB,CAAC+B,MAAM,CAAC,CAAC,CAAC,CACxEC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC;;MAE5C;IAEH,CAAC;IAAA,KAEDG,aAAa,GAAIC,KAAK,IAAK;MAExB,IAAI,CAACd,QAAQ,CAAC;QAACG,KAAK,EAAEW,KAAK,CAACC,MAAM,CAACC;MAAM,CAAC,CAAC;IAE9C,CAAC;IAAA,KAEDC,aAAa,GAAIC,KAAK,IAAK;MAExB,IAAI,CAAClB,QAAQ,CAAC;QAACkB,KAAK,EAAEA;MAAK,CAAC,CAAC;IAEhC,CAAC;IAtFA,IAAI,CAAChB,KAAK,GAAG;MACXC,KAAK,EAAE,EAAE;MACT1C,QAAQ,EAAE,EAAE;MACZsC,GAAG,EAAE,CAAC,CAAC;MACPmB,KAAK,EAAE,QAAQ;MACfC,UAAU,EAAE;IAId,CAAC;EAGF;EA6ECC,MAAMA,CAAA,EAAG;IAGP,oBAEE7D,OAAA;MAAK8D,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAEhB/D,OAAA,CAACT,WAAW;QAACyE,IAAI,EAAC,QAAQ;QAACC,EAAE,EAAE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvCrE,OAAA,CAACR,UAAU;QAACkE,aAAa,EAAE,IAAI,CAACA;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,EAE/C,IAAI,CAAC1B,KAAK,CAACgB,KAAK,KAAK,MAAM,gBACxB3D,OAAA;QAAA+D,QAAA,gBACE/D,OAAA,CAACJ,IAAI;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACPrE,OAAA,CAACF,IAAI;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACPrE,OAAA,CAACH,aAAa;UAACyD,aAAa,EAAE,IAAI,CAACA,aAAc;UAACZ,cAAc,EAAE,IAAI,CAACA;QAAe;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACxFrE,OAAA,CAACP,eAAe;UAAC+C,GAAG,EAAE,IAAI,CAACG,KAAK,CAACH,GAAI;UAACtC,QAAQ,EAAE,IAAI,CAACyC,KAAK,CAACzC;QAAS;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC,GAGJ,IAAI,CAAC1B,KAAK,CAACgB,KAAK,KAAK,QAAQ,gBAC3B3D,OAAA,CAACN,MAAM;QAACgE,aAAa,EAAE,IAAI,CAACA;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,gBAC5CrE,OAAA,CAACL,QAAQ;QAAC+D,aAAa,EAAE,IAAI,CAACA;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAEhD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMJ,CAAC;EAGV;AAGF;AAEA,eAAerD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}