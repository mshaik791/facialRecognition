{"ast":null,"code":"var _jsxFileName = \"/Users/hameed/Desktop/Web Development/Bootcamp2/facerecognitionapp/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './Components/Navigation/Navigation';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport \"./App.css\";\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiReqOptions = imageUrl => {\n  const PAT = '4f7d0da0bca240efb07ae6b755858b5e';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'mshaik791';\n  const APP_ID = 'face-detection';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      console.log(data);\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiReqOptions(this.state.input)).then(response => response.json())\n      // .then(result => console.log(result.outputs[0].data.regions[0].region_info.bounding_box))\n      .then(result => this.calculateFaceLocation(result)).catch(error => console.log('error', error));\n\n      //console.log(result.outputs[0].data.regions[0].region_info.bounding_box)\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Navigation","FaceRecognition","Logo","ImageLinkForm","Rank","jsxDEV","_jsxDEV","returnClarifaiReqOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","constructor","calculateFaceLocation","data","console","log","onButtonSubmit","setState","state","input","fetch","then","response","json","result","catch","error","onInputChange","event","target","value","box","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/hameed/Desktop/Web Development/Bootcamp2/facerecognitionapp/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './Components/Navigation/Navigation'\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm'\nimport Rank from './Components/Rank/Rank'\nimport \"./App.css\";\n\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst returnClarifaiReqOptions = (imageUrl) => {\n\n  const PAT = '4f7d0da0bca240efb07ae6b755858b5e';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n  const USER_ID = 'mshaik791';       \n  const APP_ID = 'face-detection';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                }\n            }\n        }\n    ]\n  });\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n\n\n    \n  };\n\n\n  return requestOptions;\n\n\n\n\n}\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\n\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\n\n\nclass App extends Component {\n \n constructor(){\n\n  super();\n  this.state = {\n    input: '',\n    imageUrl: '',\n    box: {}\n\n\n  }\n\n\n }\n\n\n calculateFaceLocation = (data) => {\n\n    console.log(data);\n\n\n }\n\n onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiReqOptions(this.state.input))\n    .then(response => response.json())\n    // .then(result => console.log(result.outputs[0].data.regions[0].region_info.bounding_box))\n    .then(result =>  this.calculateFaceLocation(result))\n    .catch(error => console.log('error', error));\n\n    //console.log(result.outputs[0].data.regions[0].region_info.bounding_box)\n\n }\n\n onInputChange = (event) => {\n\n    this.setState({input: event.target.value });\n\n }\n\n  render() {\n    \n\n    return (\n\n      <div className=\"App\">\n\n          <ParticlesBg type=\"cobweb\" bg={true} />\n          <Navigation/>\n          <Logo/>\n          <Rank/>\n          <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n          <FaceRecognition imageUrl={this.state.imageUrl}/>\n\n          {/*\n                  <ImageLinkForm />\n                  <FaceRecognition/>*/}\n\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}